# 此工作流的名字
name: build
# 自动执行
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
# 工作/任务，这里的工作是可以并行的。
jobs:
  # 工作的名称“编译windows版”
  buildwin:
    # 运行的操作系统 windows server latest
    runs-on: windows-latest
    # 步骤
    steps:
      # 使用预制action：拉取最新的代码
      - uses: actions/checkout@v3
      # 步骤一的名称：
      - name: Install and Build
        # 该步骤运行的终端命令，进入仓库的目录，安装依赖，运行编译命令
        run:
          yarn && yarn build
      # 步骤二的名称：将编译后的结果上传
      - name: Upload File
        # 使用预制action：上传文件，可以将执行路径打包成zip上传
        uses: actions/upload-artifact@v2
        with:
          # 自动构建GH_TOKEN
          github_token: ${{ secrets.github_token }}
          # 上传后文件的名称
          name: windows
          # 打包的路径以及文件过滤，此为仅打包dist目录下的exe文件
          path: dist/*exe
  # 工作的名称“编译macOS版”
  buildmac:
    # 运行的操作系统 macOS BigSur
    runs-on: macos-latest
    # 步骤
    steps:
      # 使用预制action：拉取最新的代码
      - uses: actions/checkout@v3
      # 步骤一的名称：
      - name: Install and Build
        # 该步骤运行的终端命令，进入仓库目录，安装依赖，运行编译命令
        run:
          yarn && yarn build
      # 步骤二的名称：将编译后的结果上传
      - name: Upload File
        # 使用预制action：上传文件，可以将执行路径打包成zip上传
        uses: actions/upload-artifact@v2
        with:
          # 自动构建GH_TOKEN
          github_token: ${{ secrets.github_token }}
          # 上传后文件的名称
          name: mac
          # 打包的路径以及文件过滤，此为仅打包dist目录下的dmg文件
          path: dist/*dmg
